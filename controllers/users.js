const bcrypt = require('bcryptjs');
const { DEFAULT_HELP_MESSAGE } = require('../config');
const User = require('../models/user');
const Message = require('../models/message');
const { getImageResponseMessage } = require('../utils/get-image-response-message');
const parseCropData = require('../utils/parsecorpdata.js');
const getResponseMessage = require('../utils/response-text');
const { TWILIO_SID, TWILIO_AUTH_TOKEN, HYDROPONICS_WA_NUMBER, NODE_ENV, JWT_SECRET } = process.env;
const client = require('twilio')(TWILIO_SID, TWILIO_AUTH_TOKEN);
const jwt = require('jsonwebtoken');
const System = require('../models/system');
const { sendWhatsappMessage } = require('../utils/send-twilio-message');
const createProfileMessage = require('../utils/create-profile-message');
const getWhatsappNumber = require('../utils/get-whatsapp-number');
const getInviteMessage = require('../utils/get-invite-message');
const { getTotalActiveUsers } = require('../utils/get-numbers-to-push');

const handleSignup = (req, res, next) => {
  // todo - make frontend force submitting username
  const { email, phoneNumber, username = 'user' } = req.body;

  User.create({ email, phoneNumber, username })
    .then((user) => {
      res.status(201).send({ message: 'User created successfully.', userId: user._id });
    })
    .catch((err) => {
      if (err.code === 11000) {
        res.status(409).send({ message: 'User already exists.' });
      } else next(err);
    });
};

const handleMobileSignup = (req, res, next) => {
  const { email, phoneNumber, whatsappName } = req.body;
  // todo: consider removing whatsapp: format from phone number
  User.create({ email: email.toLowerCase(), phoneNumber, username: whatsappName })
    .then((user) => {
      res.status(200).send({ email: user.email, id: user._id });
    })
    .catch(() => next(new Error('User already exists.')));
  // TODO: custom error & status codes
};

const handleGetUser = (req, res, next) => {
  const { _id } = req.user;
  User.findById(_id)
    .orFail(() => res.status(404).send({ message: 'User not found' }))
    .then((user) => {
      res.send(user);
    })
    .catch(next);
};

const getUserMessages = async (req, res, next) => {
  const { _id } = req.user;
  try {
    const user = await User.findById(_id).populate('messageHistory');
    res.send(JSON.stringify(user.messageHistory));
  } catch (error) {
    next(error);
  }
};

const handleLogin = (req, res, next) => {
  const { email, phoneNumber } = req.body;
  User.findOne({ email })
    .orFail((err) => {
      throw new Error('User not found');
    })
    .then((user) => {
      // todo: consider adjusting phone number to whatsapp:+XXXYYYYYYY format
      // todo: or adjust db to store phone numbers without whatsap format
      if (String(user.phoneNumber).endsWith(String(+phoneNumber))) {
        const token = jwt.sign({ _id: user._id }, NODE_ENV === 'production' ? JWT_SECRET : 'dev-secret', { expiresIn: '7d' });
        res.send({ token });
      } else {
        res.status(400).send({ message: 'Incorrect credentials.' });
      }
    })
    .catch((err) => {
      if (err.message === 'User not found') {
        res.status(400).send({ message: 'Incorrect credentials.' });
      } else {
        next(err);
      }
    });
};

const handleTwilioAuth = (req, res, next) => {
  // receives body.phoneNumber
  // if match - should respond with 202 for processing incoming crop data
  // if no match - should response with a 204 no content to trigger
  // Warning: Status codes are corresponding to twilio hooks do not change without proper care.
  // prompt for signup process
  const { phoneNumber } = req.body;
  User.findOne({ phoneNumber })
    .then((foundUser) => {
      if (!foundUser) {
        res.status(204).send();
        return;
      } else {
        User.setLastInteraction(phoneNumber);
        res.status(202).send({ user: foundUser });
      }
    })
    .catch(next);
};

// controller for adding provided crop data to the specified system, if no system name is specified,
// the data is added to the user's default system.
// if a default system does not exist, a new one is created.
// also sends a response message generated by either getImageResponseMessage or getResponseMessage

const handleCropData = async (req, res, next) => {
  try {
    const selectedSystemId = req.selectedSystem;
    const { phoneNumber, messageBody, imageUrl, plantHealth /* , systemName */ } = req.body;
    const { temperature, humidity, ph, ec } = parseCropData(messageBody);
    const user = await User.findOne({ phoneNumber });
    if (!user) {
      res.status(204).send();
      return;
    }

    let systemId;
    if (selectedSystemId) systemId = selectedSystemId;
    if (!systemId && user.defaultSystem) systemId = String(user.defaultSystem);
    if (!systemId) {
      console.log('creating default system for user name: ', user.username, 'user id: ', user._id);
      const system = await System.createSystem(user._id, 'default');
      systemId = system._id;
      await User.findByIdAndUpdate(user._id, { defaultSystem: systemId });
    }
    const systemName = await System.findById(systemId).then((system) => system.name);
    const { responseMessage: imageResponseMessage, healthState } = getImageResponseMessage(plantHealth, systemName);
    const responseMessage = imageUrl ? imageResponseMessage : getResponseMessage({ temperature, humidity, ph, ec }, systemName);
    const messageData = { temperature, humidity, ph, ec, imageUrl, healthState, messageBody, user: user._id };

    // create message in the message collection
    const message = await Message.addMessage(messageData, systemId);
    // add message to the system
    await System.addCropData(systemId, message._id);
    // add message to the user
    await User.addMessage(user._id, message._id);

    await User.setLastInteraction(phoneNumber);
    if (NODE_ENV === 'test') {
      res.send({ status: 'ok', message: 'Test crop data processed.', messageId: message._id });
      return;
    }

    await sendWhatsappMessage(phoneNumber, responseMessage);
    res.status(200).send({ responseMessage });
  } catch (err) {
    next(err);
  }
};

const handleDeleteLast = async (req, res, next) => {
  // finds the latest message sent by the user in the messages collection
  // if NODE_ENV is test, returns a 200 status code and a message after deleting the last entry
  // if NODE_ENV is not test, sends a twilio whatsapp message to the user and returns a 200 status code
  // if modifiedCount is 0, returns a 204 status code and a message saying "We have found nothing to delete."
  // if a message was successfully deleted and NODE_ENV is not test, returns a 200 status code and a message saying "Your last message was deleted."
  try {
    const { phoneNumber } = req.body;
    const user = await User.findOne({ phoneNumber });
    if (!user) return res.status(204).send({ message: 'User not found' });

    const deletedMessage = await Message.deleteLastMessage(user._id);
    if (!deletedMessage) {
      sendWhatsappMessage(phoneNumber, 'We have found nothing to delete.');
      return res.status(204).send({ message: 'We have found nothing to delete.' });
    }

    // remove the message from the user's messages array & the system's messages array
    await User.deleteMessage(user._id, deletedMessage._id);
    await System.deleteMessage(deletedMessage.system, deletedMessage._id);

    if (NODE_ENV === 'test') {
      res.send({ status: 'ok', message: 'Test last message deleted.' });
      return;
    }

    // make a messageResponseSuffix variable containing either deletedMessage.messageBody if it exists or deletedMessage.imageUrl if it exists otherwise an empty string
    let messageResponseSuffix = '';
    if (deletedMessage.messageBody) messageResponseSuffix = deletedMessage.messageBody;
    if (deletedMessage.imageUrl) messageResponseSuffix = deletedMessage.imageUrl;

    await sendWhatsappMessage(phoneNumber, `*Deleted last message in system - "${deletedMessage.systemName}".*\n` + messageResponseSuffix);
    res.status(200).send({ message: 'Your last message was deleted.', deletedMessage });
  } catch (err) {
    next(err);
  }
};

const handleHelpRequest = (req, res, next) => {
  try {
    const { phoneNumber } = req.body;
    const responseMessage = DEFAULT_HELP_MESSAGE;
    if (NODE_ENV === 'test') {
      res.send({ status: 'ok', message: DEFAULT_HELP_MESSAGE });
      return;
    }
    client.messages
      .create({ from: HYDROPONICS_WA_NUMBER, to: phoneNumber, body: responseMessage })
      .then((message) => {
        res.setHeader('Content-type', 'text/csv');
        res.status(200).send(JSON.stringify({ message: responseMessage }));
      })
      .catch(next);
  } catch (err) {
    next(err);
  }
};

const handleHistoryRequest = (req, res, next) => {
  try {
    //expects phoneNumber in the format of 'whatsapp:+972xxxxxxxxx'
    const phoneNumber = req.params.phone;
    const dayCount = req.params.days;
    const systemId = req.params.systemId === 'undefined' ? undefined : req.params.systemId;
    const isWhatsappNumber = phoneNumber.startsWith('whatsapp:');
    const whatsappConvertedNumber = isWhatsappNumber ? phoneNumber : `whatsapp:+972${String(+phoneNumber)}`;
    const toDate = new Date();
    // receives whatsapp number, to date, number of days to go back, and optional systemId (otherwise defaults to default system)
    User.getMessageHistoryFrom(whatsappConvertedNumber, toDate, dayCount, systemId)
      .then((history) => {
        if (!history || history.length === 0) return res.status(200).send([]);
        else res.send(history);
      })
      .catch(next);
  } catch (err) {
    next(err);
  }
};

const handleNewSystem = async (req, res, next) => {
  try {
    const phoneNumber = req.body.phoneNumber || req.whatsappPhoneNumber;
    const systemName = req.body.systemName?.toLowerCase() || req.systemName?.toLowerCase();
    const user = await User.findOne({ phoneNumber });
    if (!user) {
      res.status(204).send();
      return;
    }
    const system = await System.createSystem(user._id, systemName);
    await User.addSystem(user._id, system._id);
    if (req.isMobileRequest) sendWhatsappMessage(phoneNumber, `System ${system.name} created.`);
    res.status(200).send({ systemId: system._id });
  } catch (err) {
    next(err);
  }
};

const setDefaultSystem = async (req, res, next) => {
  try {
    // expects phoneNumber and systemId in the body
    const phoneNumber = req.body.phoneNumber || req.whatsappPhoneNumber;
    const systemId = req.body.systemId || req.systemId;
    await User.setDefaultSystem(phoneNumber, systemId);
    if (req.isMobileRequest) sendWhatsappMessage(phoneNumber, 'Default system set.');
    res.status(200).send({ message: 'Default system set.' });
  } catch (err) {
    next(err);
  }
};

const getAllUserSystems = async (req, res, next) => {
  try {
    // expects phoneNumber in the body
    const phoneNumber = req.body.phoneNumber || req.whatsappPhoneNumber;
    const user = await User.findOne({ phoneNumber });
    if (!user) return res.status(204).send({ message: 'User not found' });
    const systems = await System.find({ _id: { $in: user.systems } });
    res.status(200).send({ systems });
  } catch (err) {
    next(err);
  }
};

const handleProfileRequest = async (req, res, next) => {
  try {
    const { phoneNumber } = req.query;
    const user = await User.findOne({ phoneNumber }).populate('systems messageHistory defaultSystem');
    if (!user) return res.status(204).send({ message: 'User not found' });
    sendWhatsappMessage(phoneNumber, createProfileMessage(user));
    res.status(200).send({ user });
  } catch (err) {
    next(err);
  }
};

/**
 * Adds a user to the list of users on a system
 * receives messageBody in the format of 'invite <user-phone-number> <system-name>'
 * Sends a whatsapp message to the invited user
 * System must be public, if not, sends an error whatsapp message and response requesting to make the system public
 * If the user is already a part of the systems' users, sends an error whatsapp message and response
 * Utilizes a function that converts phone numbers to be invited from '0501234567' to 'whatsapp:+972501234567' taking into account the country code which will be figured out by the twilio api
 */

const handleInviteToCollaborate = async (req, res, next) => {
  try {
    const { phoneNumber, messageBody } = req.body;
    const [invite, invitedPhoneNumber, systemName] = messageBody.toLowerCase().split(' ');
    const user = await User.findOne({ phoneNumber });
    const system = await System.findOne({ name: systemName, owner: user._id });
    const invitedUser = await User.findOne({ phoneNumber: getWhatsappNumber(invitedPhoneNumber) });
    if (!system) {
      sendWhatsappMessage(
        phoneNumber,
        `System ${systemName} not found.\nPlease make sure your message is formatted\n'invite <user-phone-number> <system-name>'`
      );
      return res.status(200).send({ message: `System ${systemName} not found.` });
    }
    if (!system.isPublic) {
      sendWhatsappMessage(phoneNumber, `System ${systemName} is not public.\nYou may make it public by typing 'set public ${systemName}'`);
      return res.status(200).send({ message: `System ${systemName} is not public.` });
    }
    if (!invitedUser) {
      sendWhatsappMessage(
        phoneNumber,
        `User ${invitedPhoneNumber} is not subscribed to Hydroponics services.\nPlease make sure your message is formatted 'invite <user-phone-number> <system-name>'`
      );
      return res.status(200).send({ message: `User ${invitedPhoneNumber} is not subscribed to Hydroponics services.` });
    }
    if (system.users.includes(invitedUser._id)) {
      sendWhatsappMessage(phoneNumber, `User ${invitedPhoneNumber} is already a part of system ${systemName}.`);
      return res.status(200).send({ message: `User ${invitedPhoneNumber} is already a part of system ${systemName}.` });
    }
    const whatsappConvertedNumber = `whatsapp:+972${String(+invitedPhoneNumber)}`;
    sendWhatsappMessage(whatsappConvertedNumber, getInviteMessage(user.username, systemName));
    await System.addUser(system._id, invitedUser._id);
    invitedUser.systems.push(system._id);
    await invitedUser.save();
    sendWhatsappMessage(phoneNumber, `User ${invitedPhoneNumber} invited to system ${systemName}.`);
    res.status(200).send({ message: `User ${invitedPhoneNumber} invited to system ${systemName}.` });
  } catch (err) {
    next(err);
  }
};

/**
 * It gets the user's systems and sends them to the user via whatsapp or returns them to the client
 * @param req - the request object
 * @param res - the response object
 * @param next - a function that you call to pass control to the next middleware function.
 */

const getUserSystems = async (req, res, next) => {
  const isMobileRequest = Boolean(req.query.messageBody);
  let phoneNumber = req.body.phoneNumber || req.query.phoneNumber;
  if (!phoneNumber.startsWith('whatsapp')) phoneNumber = getWhatsappNumber(phoneNumber);
  try {
    const user = await User.findOne({ phoneNumber }).populate('systems defaultSystem');
    if (!user) {
      if (isMobileRequest) {
        sendWhatsappMessage(phoneNumber, `User with number ${phoneNumber} not found.`);
        return res.status(200).send({ message: `User with number ${phoneNumber} not found.` });
      } else {
        return res.status(404).send({ message: `User with number ${phoneNumber} not found.` });
      }
    }

    const userSystems = user.systems.map((system) => {
      return { ...system.toObject() };
    });

    const userDefaultSystemName = user.defaultSystem?.name;

    if (user.systems.length) {
      const systemNames = user.systems.map((system) => system.name).join(', ');
      if (isMobileRequest) {
        sendWhatsappMessage(phoneNumber, `*Your system names:*\n${systemNames}\n\n*Default system:*\n${userDefaultSystemName}`);
        res.status(200).send({ message: 'User systems sent successfully' });
      } else {
        // not a mobile request
        res.status(200).send({ systems: userSystems });
      }
    } else {
      if (isMobileRequest) {
        sendWhatsappMessage(phoneNumber, `You don't have any systems`);
        res.status(204).send({ message: 'User has no systems' });
      } else {
        // not a mobile request
        res.status(404).send({ message: 'User has no systems' });
      }
    }
  } catch (error) {
    next(error);
  }
};

/**
 * Gets a users default system by request query phoneNumber
 * returns a web response with the default system object
 */

const getDefaultSystem = async (req, res, next) => {
  try {
    const { phoneNumber } = req.query;
    const user = await User.findOne({ phoneNumber }).populate('defaultSystem');
    if (!user) return res.status(404).send({ message: 'User not found' });
    const defaultSystem = user.defaultSystem;
    if (!defaultSystem) return res.status(404).send({ message: 'User has no default system' });
    res.status(200).send({ defaultSystem });
  } catch (err) {
    next(err);
  }
};

const getActiveUserCount = async (req, res, next) => {
  try {
    const users = await User.find({});
    const activeUsers = getTotalActiveUsers(users);
    res.status(200).send({ activeUsers });
  } catch (err) {
    next(err);
  }
};

module.exports = {
  handleHistoryRequest,
  handleTwilioAuth,
  handleHelpRequest,
  handleDeleteLast,
  handleSignup,
  handleLogin,
  handleMobileSignup,
  handleCropData,
  handleGetUser,
  handleNewSystem,
  setDefaultSystem,
  getAllUserSystems,
  handleProfileRequest,
  handleInviteToCollaborate,
  getUserSystems,
  getDefaultSystem,
  getUserMessages,
  getActiveUserCount,
};